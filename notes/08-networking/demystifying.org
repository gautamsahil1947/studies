* What is the purpose of having layers in networking?
** General Information

  - If not then each application has to do all the packing, connecting... stuff.

  - Due to layering, the Application layer has to only deal with the application layer
    on the other side. Same goes for the transport layer, Dispatch layers .. etc.

  - Each layer provides services to the layer above, and it utilises services
    from the layer below. For example, the application layer gives some data and address
    to the transport layer .... Through an interface.

  - Protocol in networking defines how a layer would interact with its peer layer
    across the network. Eg, The transport layer is responsible for creating and numbering
    the packets. Therefore there is a notion of acknowledgement, so that the sender knows
    which packets were received, and which went missing. (certain control packets are changed)

    --> add an image of tcp/ip and osi models.

** Physical Layer

   - The goal of the physical layer is to transfer the data from the source
     to the destination. This can be done using some modulation techniques.
     This deals with the connecting part. (are the source and destination connected).

** Link Layer

   - Send packets along the physical layer. It is used to control the access of the
     physical medium. Ensuers that the data has reached the other end (acknowledgement).

** Network Layer

   - Coordinates multiple packets from source to the destination over various links.
     Similar to function of postal system when sending one letter. Basically deals
     with Packetization and Addressing.

** Transport Layer

   - Segmentation of a large packet into multiple pieces. Transmission and sequencing of
     segments happens here. Acknowledgements to track and request retransmission.

** Application Layer

   - Browser is an example of application layer client. Connections are established
     between a client to a server. Communications happen via requests and responses.

* The Packet

  - Inside the data packet, it has the source, and the destination IP, and MAC
    addresses.
    
* Addresses

  - MAC address is the address given to the network device commiunicating. For example,
    the wifi card, or the lan card. It is assigned to the device by the manufacterer.
    But only this address is not enough for sending data from one device to other,
    reason being, it will be complicated to locate which device is where.

  - What we need is a hierarchical system of addressing. Here comes the IP-address. It
    makes it easy to route the data packets.

  - Next level of abstraction leads us to the domain names. These are technically
    addresses to servers (public), which are mapped to custom strings called domain names.
    These domain names are mapped to the IP-Addresses of the servers via other servers
    called Domain Name Server (DNS).
    
* Router
  - A router is an end point of a network, which means that it connects two
    different networks to each other. Networks are mapped to the interfaces
    of a router.

  - An IP-Address is a 32-bit binary number which is divided into 4 parts(for ease
    of human comprenhension). (10...networks) <--> router <--> (223...networks). 

  - An Ip-Address is translated to mac address via Address resolution protocol (ARP).

* IP-Addresses

  - Public Ip addresses are used by an organisation to connect with the outside world.
    Private Ip Addresses are used by an organisation within itself.

  - NAT (network address translator) maps the internal IP address with the public
    IP address

* Subnet Mask
  - Basically it tells whether two different Ip addresses belong to the same network
    or not.
* Gateway
  - The router of your home

#+begin_src bash
  en # enables wifi router
  sh ip nat translations
  sh ip route # shows the ip and route mappings in a router
  sh ip arp # shows the ip and mac address mapping of the connected devices
  sh mac-address-table # shows the mac address table of connected devices to the switchw
  ping 10.10.0.1
#+end_src

* Routing methods
** Source Based Routing
   - the entire route is specified at the source itself.
** Distance-Vector routing
   - whole entire routing table is shared.
   - Each router has a routing table,
     - The distance to the local neighbour is 0.
     - They take a look at their neighbour's routing table, and update their own routing table.
     - The algorithm used to update the tables is called the belman ford algorithm.
** Link State routing.
   - only the link state is shared eg: ospf (open shortest path first algorithm)
   - every router brodcasts the link state of itself by brodcasting link state packes
   - every router receiving these packets store them in a database called a lsp database.
   - then it finds the shortest path for that packet, and sends it to the next link.
   - And the same thing repeates, and hop by hop, the packet reaches the destination.
   - each time a router sends a packet, it adds a sequence number to it.
** RIP (routing information protocol)
   
